Given two sorted arrays a[] and b[] of size n and m respectively, the task is to merge them in sorted order without using any extra space. 
Modify a[] so that it contains the first n elements and modify b[] so that it contains the last m elements.

Examples:

Input: a[] = [2, 4, 7, 10], b[] = [2, 3]
Output:
2 2 3 4
7 10
Explanation: After merging the two non-decreasing arrays, we get, 2 2 3 4 7 10
Input: a[] = [1, 5, 9, 10, 15, 20], b[] = [2, 3, 8, 13]
Output:
1 2 3 5 8 9
10 13 15 20
Explanation: After merging two sorted arrays we get 1 2 3 5 8 9 10 13 15 20.
Input: a[] = [0, 1], b[] = [2, 3]
Output:
0 1
2 3
Explanation: After merging two sorted arrays we get 0 1 2 3.
Constraints:
1 <= a.size(), b.size() <= 105
0 <= a[i], b[i] <= 107




class Solution {
    // Function to merge the arrays.
    public void mergeArrays(int a[], int b[]) {
        // code here
        int n = a.length;
        int m = b.length;
        int gap = nextGap(n+m);
        
        while(gap>0){
            int i =0 , j = gap;
            
            while(j<n+m){
                int val1 = getVal(a,b,i,n);
                int val2 = getVal(a,b,j,n);
                
                if(val1 > val2){
                    setVal(a,b,i,n,val2);
                    setVal(a,b,j,n,val1);
                }
                i++;
                j++;
            }
            gap = nextGap(gap);
        }
    }
        
        private int getVal(int[] a , int[] b , int index , int n){
            return index < n ? a[index] : b[index -n];
        }
        
        private void setVal(int [] a , int [] b ,int index ,  int n , int value ){
            if(index <n ){
                a[index] = value;
            }else{
                b[index - n ] =value;
            }
        }
        private int nextGap(int gap){
            if(gap<=1) return 0;
            return (gap / 2 ) + (gap%2);
            
        
    }
}


